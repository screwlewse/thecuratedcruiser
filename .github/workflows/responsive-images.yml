name: Process Images Only

on:
  push:
    paths:
      - "images/src/**"  # Only trigger when files in images/src directory change
      - "**/*.html"      # Trigger on HTML changes
      - "**/*.css"       # Trigger on CSS changes
      - "**/*.js"        # Trigger on JS changes
    branches: [ main ]
  workflow_dispatch:     # Allow manual triggering

# Add proper permissions for commit & push only
permissions:
  contents: write

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: |
          # Check if package.json exists and has sharp dependency
          if [ -f "package.json" ] && grep -q '"sharp"' package.json; then
            npm ci
          else
            # If package.json exists but doesn't have sharp
            if [ -f "package.json" ]; then
              npm install --save sharp
            else
              # Create package.json and install sharp
              npm init -y
              npm install --save sharp
            fi
          fi

      - name: Process images
        run: |
          mkdir -p images/processed

          # Create a Node.js script to process images
          cat > process-images.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const sharp = require('sharp');

          const sourceDir = 'images/src';
          const outputDir = 'images/processed';

          // Make sure output directory exists
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
          }

          // Get all image files from the source directory
          if (fs.existsSync(sourceDir)) {
            const imageFiles = fs.readdirSync(sourceDir)
              .filter(file => /\.(jpg|jpeg|png)$/i.test(file));

            // Process each image
            imageFiles.forEach(file => {
              const filePath = path.join(sourceDir, file);
              const fileNameWithoutExt = path.parse(file).name;
              const fileExt = path.parse(file).ext;

              // Create small version (480px width)
              sharp(filePath)
                .resize(480, 480, {
                  fit: 'cover',
                  position: 'center'
                })
                .toFile(path.join(outputDir, `${fileNameWithoutExt}-small${fileExt}`))
                .catch(err => console.error(`Error processing ${file} for small size:`, err));

              // Create medium version (768px width)
              sharp(filePath)
                .resize(768, 768, {
                  fit: 'cover',
                  position: 'center'
                })
                .toFile(path.join(outputDir, `${fileNameWithoutExt}-medium${fileExt}`))
                .catch(err => console.error(`Error processing ${file} for medium size:`, err));

              // Create large version (1200px width)
              sharp(filePath)
                .resize(1200, 1200, {
                  fit: 'cover',
                  position: 'center'
                })
                .toFile(path.join(outputDir, `${fileNameWithoutExt}-large${fileExt}`))
                .catch(err => console.error(`Error processing ${file} for large size:`, err));

              // Create optimized original
              sharp(filePath)
                .jpeg({ quality: 85 })
                .toFile(path.join(outputDir, file))
                .catch(err => console.error(`Error optimizing ${file}:`, err));
            });

            console.log(`Processed ${imageFiles.length} images`);
          } else {
            console.log(`Source directory ${sourceDir} does not exist`);
          }
          EOF

          # Run the image processing script
          node process-images.js

      - name: Commit changes (if any)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # First stage all changes
          git add -A

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit the changes with message indicating manual deployment is needed
            git commit -m "Process responsive images - DEPLOY MANUALLY using the Deploy workflow"

            # Pull with rebase strategy
            git pull --rebase origin main

            # Push changes
            git push
          fi